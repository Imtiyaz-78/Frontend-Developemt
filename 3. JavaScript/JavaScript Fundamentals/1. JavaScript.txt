
// https://262.ecma-international.org/#sec-typeof-operator
<====================> JavaScript-fundamentals <=========================>

=> Variables:
   Variables are container to store the data

=> Variable Rules:
   1. Variable name are case sensitives; "a" & "A" is diffrent.
   2. Only letters, digits, underscore(_), and $ is allowed (not even space).
   3. Only a letter, underscore(_), Or $ should be 1st character.
   4. Reserved words cannot be Variable names.

   Ex: fullName  <--- camel case (This is best and mostly use)
       full_name <--- snake case 
       full-name <--- kabab case
       FullName  <--- pascal case 


===> callback function:
      A callback function is a function passed into another function as an argument

==> let, var & const
    1. var: Variable can be re-declared & updated. A global scope
    2. let: Variable cannot be re-declared but can be updated. A block scope Variable
    3. const: Variable cannot be re-declared or not be upadted. A block scope Variable


==> How memory work in JavaScript:
   -> There are two type of memory in JavaScript
   1. Stake memory (All Primitives type data are use Stack memory)
   2. Heap memory (All Non-Primitives type data are use heap memory)

 == > Array is JavaScript:
      Array is object in JavaScript.
      Array are contain mix of diffrent data-Types, Ex: [10, 20, "Apple", true, 50].
      Array in Js Resizable that means we can more after after declared.
      JavaScript array-copy operations create shallow copies.
        
         --> shallow copies:
             A shallow copy of an object is a copy whose properties share the same references (point to the same underlying values) as those of the source object from which the copy was made. 


        --> deep copy:
            A deep copy of an object is a copy whose properties do not share the same references (point to the same underlying values) as those of the source object from which the copy was made.

         --> shallow copy ka matlb hota hai if hum uske reference copy ko chnage karenge then
             uske original copy mein change hoga.
 
 
====> what is synchronous and asynchronous:
When you execute something synchronously, you wait for it to finish before moving on to another task. When you execute something asynchronously, you can move on to another task before it finishes.


==> What Does Lexical Mean?
    Anything related to creating words, expressions, or variables is termed lexical.


==> What exactly is Scope?
    Scope refers to the area where an item (such as a function or variable)
    is visible and accessible to other code.

    1. Scope means area, space, or region.
    2. Global scope means global space or a public space.
    3. Local scope means a local region or a restricted region.



===> What is Lexical Scope in JavaScript?
     1. Lexical scope is the ability for a function scope to access variables from the parent scope.
     2. Lexical scope is the definition area of an expression.
     3. In other words, an item's lexical scope is the place in which the item got created.
        Another name for lexical scope is static scope.

     --> Example of Lexical Scope below:
    
     var a = 10; // variable a assigned to 10

        var func = function (){ // outermost function
            var b = 20;
            console.log("a and b is accessible (outer):", a, b);
            var innerFunc= function (){ // innermost function
                var c = 30;
                console.log("a and b and c is accessible (innner):", a, b, c);
            }
            innerFunc();
            return;
        }
        func(); // invoke function func 
        console.log("only a is accessible (global):", a);

        Output will be :
        a and b is accessible (outer): 10 20
        a and b and c is accessible (innner): 10 20 30
        only a is accessible (global): 10



==> What is a Scope Chain?
    A scope chain refers to the unique spaces that exist from the scope 
    where a variable got called to the global scope.
    
     